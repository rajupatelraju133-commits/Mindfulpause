<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mindful Pause - Meditation Timer</title>
    <!-- Link to the Manifest File -->
    <link rel="manifest" href="manifest.json">
    <!-- Theme color for browser UI -->
    <meta name="theme-color" content="#f43f5e"/>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #fecaca 0%, #fbcfe8 100%);
        }
        .breathing-circle {
            transition: transform 1s ease-in-out;
        }
        .play-pause-btn svg {
            width: 2.5rem;
            height: 2.5rem;
        }
        .session-btn.active {
            background-color: #f43f5e; 
            color: white;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        }
        .time-btn.active {
            background-color: #fb7185;
            color: white;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-md mx-auto bg-white/70 backdrop-blur-xl rounded-2xl shadow-2xl p-6 sm:p-8 text-center">
        
        <h1 class="text-2xl sm:text-3xl font-bold text-slate-800 mb-2">Mindful Pause</h1>
        <p class="text-slate-600 mb-6">Choose your session and find your center.</p>

        <div class="relative w-56 h-56 sm:w-64 sm:h-64 mx-auto flex items-center justify-center">
            <div id="breathing-circle" class="breathing-circle absolute inset-0 bg-gradient-to-br from-rose-200 to-rose-400 rounded-full"></div>
            <div class="relative flex flex-col items-center justify-center">
                <span id="instruction-text" class="text-lg font-medium text-white/90 h-7 transition-opacity duration-500">Ready?</span>
                <span id="time-display" class="text-5xl sm:text-6xl font-mono text-white">10:00</span>
            </div>
        </div>

        <div class="my-6">
            <p class="text-slate-600 font-medium mb-3">Session Type</p>
            <div class="grid grid-cols-3 gap-2 sm:gap-3">
                <button onclick="setSession('beginner')" class="session-btn active py-2 px-3 rounded-lg bg-white/80 hover:bg-rose-100 transition-all duration-300">Beginner</button>
                <button onclick="setSession('medium')" class="session-btn py-2 px-3 rounded-lg bg-white/80 hover:bg-rose-100 transition-all duration-300">Medium</button>
                <button onclick="setSession('advanced')" class="session-btn py-2 px-3 rounded-lg bg-white/80 hover:bg-rose-100 transition-all duration-300">Advanced</button>
            </div>
        </div>

        <div class="mb-8">
             <div class="flex justify-center space-x-2 sm:space-x-3">
                <button onclick="setTime(300)" class="time-btn bg-white/80 text-slate-700 hover:bg-rose-200 font-medium py-2 px-4 rounded-full transition-colors duration-300">5 min</button>
                <button onclick="setTime(600)" class="time-btn active bg-white/80 text-slate-700 hover:bg-rose-200 font-medium py-2 px-4 rounded-full transition-colors duration-300">10 min</button>
                <button onclick="setTime(900)" class="time-btn bg-white/80 text-slate-700 hover:bg-rose-200 font-medium py-2 px-4 rounded-full transition-colors duration-300">15 min</button>
                <button onclick="setTime(1200)" class="time-btn bg-white/80 text-slate-700 hover:bg-rose-200 font-medium py-2 px-4 rounded-full transition-colors duration-300">20 min</button>
            </div>
        </div>

        <div class="flex justify-center items-center space-x-4">
            <button id="reset-btn" class="p-3 bg-white/80 text-slate-500 hover:bg-slate-200 rounded-full transition-all duration-300" aria-label="Reset Timer">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/><path d="M3 3v5h5"/><path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16"/><path d="M21 21v-5h-5"/></svg>
            </button>
            <button id="play-pause-btn" class="play-pause-btn p-4 bg-rose-500 text-white rounded-full shadow-lg hover:bg-rose-600 transition-all duration-300 transform hover:scale-105" aria-label="Play Timer">
                <svg id="play-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-10 h-10"><path fill-rule="evenodd" d="M4.5 5.653c0-1.426 1.529-2.33 2.779-1.643l11.54 6.647c1.295.742 1.295 2.545 0 3.286L7.279 20.99c-1.25.717-2.779-.217-2.779-1.643V5.653z" clip-rule="evenodd" /></svg>
                <svg id="pause-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-10 h-10 hidden"><path fill-rule="evenodd" d="M6.75 5.25a.75.75 0 01.75.75v12a.75.75 0 01-1.5 0V6a.75.75 0 01.75-.75zm9 0a.75.75 0 01.75.75v12a.75.75 0 01-1.5 0V6a.75.75 0 01.75-.75z" clip-rule="evenodd" /></svg>
            </button>
            <div class="w-12 h-12"></div>
        </div>

    </div>

    <script>
        // --- PWA Service Worker Registration ---
        if ('serviceWorker' in navigator) {
          window.addEventListener('load', () => {
            navigator.serviceWorker.register('/service-worker.js').then(registration => {
              console.log('ServiceWorker registration successful with scope: ', registration.scope);
            }, err => {
              console.log('ServiceWorker registration failed: ', err);
            });
          });
        }
    </script>

    <script>
        // DOM Elements
        const timeDisplay = document.getElementById('time-display');
        const instructionText = document.getElementById('instruction-text');
        const playPauseBtn = document.getElementById('play-pause-btn');
        const playIcon = document.getElementById('play-icon');
        const pauseIcon = document.getElementById('pause-icon');
        const resetBtn = document.getElementById('reset-btn');
        const breathingCircle = document.getElementById('breathing-circle');
        const timeButtons = document.querySelectorAll('.time-btn');
        const sessionButtons = document.querySelectorAll('.session-btn');

        // --- State Variables ---
        let timerInterval = null;
        let defaultTime = 600;
        let secondsRemaining = defaultTime;
        let isRunning = false;
        let isToneStarted = false;
        let currentSession = 'beginner';
        let breathCycleTime = 0;
        let currentPhaseIndex = 0;

        // --- Session Configurations ---
        const sessions = {
            beginner: {
                name: 'Beginner',
                cycleDuration: 10, // seconds
                phases: [
                    { name: 'Breathe In', duration: 5, scale: 1.15 },
                    { name: 'Breathe Out', duration: 5, scale: 1.0 },
                ]
            },
            medium: {
                name: 'Box Breathing',
                cycleDuration: 16,
                phases: [
                    { name: 'Breathe In', duration: 4, scale: 1.15 },
                    { name: 'Hold', duration: 4, scale: 1.15 },
                    { name: 'Breathe Out', duration: 4, scale: 1.0 },
                    { name: 'Hold', duration: 4, scale: 1.0 },
                ]
            },
            advanced: {
                name: '4-7-8 Breathing',
                cycleDuration: 19,
                phases: [
                    { name: 'Breathe In', duration: 4, scale: 1.15 },
                    { name: 'Hold', duration: 7, scale: 1.15 },
                    { name: 'Breathe Out', duration: 8, scale: 1.0 },
                ]
            }
        };

        // Sound Synthesis using Tone.js
        const metalSynth = new Tone.MetalSynth({
            frequency: 150, envelope: { attack: 0.001, decay: 0.4, release: 0.2 },
            harmonicity: 8.5, modulationIndex: 40, resonance: 4000, octaves: 2
        }).toDestination();

        // --- Core Functions ---

        function updateDisplay() {
            const minutes = Math.floor(secondsRemaining / 60);
            const seconds = secondsRemaining % 60;
            timeDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        }

        function updateBreathingGuide() {
            const session = sessions[currentSession];
            const currentPhase = session.phases[currentPhaseIndex];
            
            instructionText.textContent = currentPhase.name;
            breathingCircle.style.transform = `scale(${currentPhase.scale})`;
            
            breathCycleTime++;
            if (breathCycleTime >= currentPhase.duration) {
                breathCycleTime = 0;
                currentPhaseIndex = (currentPhaseIndex + 1) % session.phases.length;
            }
        }

        function toggleTimer() {
            if (!isToneStarted) {
                Tone.start();
                isToneStarted = true;
            }
            isRunning = !isRunning;
            isRunning ? startTimer() : pauseTimer();
        }

        function startTimer() {
            metalSynth.triggerAttackRelease("C5", "8n", Tone.now());
            playIcon.classList.add('hidden');
            pauseIcon.classList.remove('hidden');
            
            updateBreathingGuide(); // Initial call
            timerInterval = setInterval(() => {
                secondsRemaining--;
                updateDisplay();
                updateBreathingGuide();

                if (secondsRemaining <= 0) {
                    clearInterval(timerInterval);
                    metalSynth.triggerAttackRelease("G5", "4n", Tone.now());
                    metalSynth.triggerAttackRelease("C6", "4n", Tone.now() + 0.5);
                    resetTimer();
                }
            }, 1000);
        }

        function pauseTimer() {
            clearInterval(timerInterval);
            playIcon.classList.remove('hidden');
            pauseIcon.classList.add('hidden');
            instructionText.textContent = 'Paused';
        }

        function resetTimer() {
            clearInterval(timerInterval);
            isRunning = false;
            secondsRemaining = defaultTime;
            breathCycleTime = 0;
            currentPhaseIndex = 0;
            updateDisplay();
            playIcon.classList.remove('hidden');
            pauseIcon.classList.add('hidden');
            instructionText.textContent = 'Ready?';
            breathingCircle.style.transform = 'scale(1)';
        }

        function setTime(seconds) {
            defaultTime = seconds;
            resetTimer();
            timeButtons.forEach(btn => {
                btn.classList.toggle('active', parseInt(btn.textContent) * 60 === seconds);
            });
        }

        function setSession(sessionName) {
            currentSession = sessionName;
            resetTimer();
            sessionButtons.forEach(btn => {
                btn.classList.toggle('active', btn.textContent.toLowerCase().includes(sessionName));
            });
        }

        // --- Event Listeners ---
        playPauseBtn.addEventListener('click', toggleTimer);
        resetBtn.addEventListener('click', resetTimer);

        // Initialize display
        window.onload = () => {
            updateDisplay();
            // Set default active buttons
            setTime(defaultTime);
            setSession(currentSession);
        };
    </script>
</body>
</html>